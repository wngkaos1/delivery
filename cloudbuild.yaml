steps:
  ### Test
#  - id: 'test'
#    name: 'gcr.io/cloud-builders/mvn'
#    args: [
#      'test',
#      '-Dspring.profiles.active=test'
#    ]
  ### Build
  - id: 'build'
    name: 'gcr.io/cloud-builders/mvn'
    args: [
      'clean',
      'package',
      '-Dmaven.test.skip=true'
    ]
#    waitFor: ['test']
  ### docker Build
  - id: 'docker build'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--tag=gcr.io/$PROJECT_ID/$_PROJECT_NAME:$COMMIT_SHA'
      - '.'
  ### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker push gcr.io/$PROJECT_ID/$_PROJECT_NAME:$COMMIT_SHA
  ### deploy
  ## 아래 방법은 최근 방법으로 deploy 와 service 를 동시에 다음과 같이 배포가 가능하다.
  ## 다만 서비스명은 _PROJECT_NAME_service 로 자동 생성이 되고, LoadBalancer 로 생성이 된다.
  ## 자세하게 설정을 주어서 배포를 하려면 yaml 파일을 만들어서 (-f) 로 배포를 해야한다.
#  - id: 'deploy'
#    name: 'gcr.io/cloud-builders/gke-deploy:stable'
#    args:
#      - run
#      - -a=$_PROJECT_NAME
#      - --image=gcr.io/$PROJECT_ID/$_PROJECT_NAME:$COMMIT_SHA
#      - --expose=8080
#      - --location=$_GKE_LOCATION
#      - --cluster=$_GKE_CLUSTER
#substitutions:
#  _GKE_LOCATION: asia-northeast1-a
#  _GKE_CLUSTER: standard-cluster-1

  ### deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        PROJECT=$$(gcloud config get-value core/project)
        gcloud container clusters get-credentials "$${CLOUDSDK_CONTAINER_CLUSTER}" \
          --project "$${PROJECT}" \
          --zone "$${CLOUDSDK_COMPUTE_ZONE}"

        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: $_PROJECT_NAME
          labels:
            app: $_PROJECT_NAME
        spec:
          ports:
            - port: 8080
              targetPort: 8080
          selector:
            app: $_PROJECT_NAME
        EOF

        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: $_PROJECT_NAME
          labels:
            app: $_PROJECT_NAME
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: $_PROJECT_NAME
          template:
            metadata:
              labels:
                app: $_PROJECT_NAME
            spec:
              containers:
                - name: $_PROJECT_NAME
                  image: gcr.io/$PROJECT_ID/$_PROJECT_NAME:$COMMIT_SHA
                  ports:
                    - containerPort: 8080
        EOF

options:
  env:
    #    # location/name of GKE cluster (used by all kubectl commands)
    - CLOUDSDK_COMPUTE_ZONE=asia-northeast1-a
    - CLOUDSDK_CONTAINER_CLUSTER=event-storming-market
